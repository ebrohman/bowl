c
f
c
game.score
c
game.score
game.frames.last.rolls.inject :+
game.frames.last
c
game.frames.last
game.frames.last.rolls
game.frames.last.rolls.
game.frames.last.rolls.inject :+
c
game.frames.last.rolls.inject :+
game.frames.last.score
game.frames.last.finished?
game.frames.last
game.score
game
c
game.frames.last.finished?
game.frames.last
game.frames.count
game
c
game.score
c
game.score
c
game.score
game
exit
frame
exit
frame
exit
f
c
f
c
frame
c
self
frame
c
frame
c
f
c
game.score
c
game.frames.map &:total
gae.frames.map &:total
game.score
c
game.frames.reduce{|sum, f|  p f }
game.frames.reduce{|sum, f|  p sum  }
game.frames.reduce{|sum, f|  sum  + f.total }
game.frames.reduce{|sum, f|  sum  f.total }
game.frames.reduce{|sum, f| p sum +  f.total }
game.frames.reduce{|sum, f| p sum, f.total }
game.frames.reduce{|sum, f| psum, f.total }
game.frames.reduce{|sum, f| p f.total }
game.frames.reduce{|sum, f| p f }
game.frames.reduce{|sum, f| p total }
game.frames.reduce{|sum, f| p  sum.total }
game.frames.reduce{|sum, f| f +  sum.total }
game.frames.reduce{|sum, f| f.total +  sum.total }
game.frames.reduce{|sum, f| f.total +  sum }
game.frames.reduce{|sum, f| f +  sum.total }
game.frames.reduce{|sum, f| sum +  f.total }
game.score
c
game.frames.reduce(0) {|_, f| f.total }
game.frames.reduce{|_, f| f.total }
game.frames.map{|f| f.total}
game.frames.inject{|t, f| f.total }
game.frames.inject{|_, f| f.total }
game.frames
game
game.score
c
game.frames.reduce {|t,f| f.total }
game.frames.reduce {|f, t| f.total }
game.frames.reduce {|f| f.total }
game.frames.map {|f| f.total }
game.frames.first.total
game.frames.first
game.frames.inject {|f| f.total }
game.frames.inject( &:total )
game.frames
game.send :score
game
c
game.score
c
game.frames[1]
game.frames.second
game.frames.first
game.frames.count
c
game.frames.count
game
c
game.current_frame
game.roll 2
game.roll 7
game
frame
c
exit
game.frames.length
game.frames
game
c
game.frames
game.current_frame
game
c
game.frames.size
game.frames
game
exit
c
self
c
self
c
self
exit
c
self
pins
n
finished?
self
c
finished?
self
c
pins
self
c
remaining_pins
c
PINS - first_roll 
PINS - first_roll - second_roll
second_roll
PINS - first_roll
remaining_pins
remaining+pins
c
exit
PINS - first_roll - second_roll
PINS - first_roll
PINS
remaining_pins
remainin_pins
c
self
n
pins
self
c
frame
faefaeei
rm
xtei
ei
frame
described_class
frame
c
n
remaining_pins
remainin_pins
c
remaining_pins
c
frame
c
data = with_csv
c
File.exists? "./spec_helper.rb"
File.exists? "spec_helper.rb"
File.exists "spec_helper.rb"
data = with_csv
c
data = with_csv
c
data = with_csv
c
data = with_csv
exit
CSV.generate( "data/sample_game.csv" ) { |line| p line }
CSV.generate( "data/sample_game.csv" )
CSV
require 'csv'
with_csv
c
d = with_csv
c
data = with_csv
c
d = with_csv
c
d = with_csv
data
c
data = with_csv
@data
data
c
Game
c
Bowl::Game
Bowl
Game
Gme
c
include Bowl
Bowl
Game
include Bowl
Game
de Bowl
Game
